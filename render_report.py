import os
import json
import datetime
import jinja2
import logging

logger = logging.getLogger(__name__)

def renderizar_relatorio(dados_diagnostico: dict) -> str:
    """
    Renderiza o template HTML do relat√≥rio com os dados fornecidos.

    Args:
        dados_diagnostico: Um dicion√°rio contendo todos os dados para o template.

    Returns:
        O conte√∫do HTML do relat√≥rio renderizado como uma string.
    """
    
    logger.info("üé® INICIANDO RENDERIZA√á√ÉO DO RELAT√ìRIO")
    logger.info(f"üìã Dados recebidos: {json.dumps(dados_diagnostico, indent=2, ensure_ascii=False)}")
    
    try:
        # O searchpath agora aponta para o diret√≥rio onde o script est√° localizado.
        script_dir = os.path.dirname(os.path.abspath(__file__))
        template_loader = jinja2.FileSystemLoader(searchpath=script_dir)
        template_env = jinja2.Environment(loader=template_loader)
        
        logger.info(f"üìÇ Procurando template em: {script_dir}")
        
        # Verificar se o template existe
        template_path = os.path.join(script_dir, 'relatorio_template.html')
        if not os.path.exists(template_path):
            logger.error(f"‚ùå Template n√£o encontrado: {template_path}")
            raise FileNotFoundError(f"Template n√£o encontrado: {template_path}")
        
        template = template_env.get_template('relatorio_template.html')
        logger.info("‚úÖ Template carregado com sucesso")

        # Adiciona a data de gera√ß√£o e o ano atual aos dados do template
        dados_completos = dados_diagnostico.copy()
        dados_completos['data_geracao'] = datetime.datetime.now().strftime("%d/%m/%Y")
        dados_completos['ano_atual'] = datetime.datetime.now().year

        # Log dos dados que ser√£o enviados para o template
        logger.info("üìä DADOS PARA O TEMPLATE:")
        logger.info(f"  üìà Score Final: {dados_completos.get('score_final', 'MISSING')}")
        
        scores_radar = dados_completos.get('scores_radar', {})
        if scores_radar:
            logger.info("  üìä Scores Radar:")
            for key, value in scores_radar.items():
                logger.info(f"    {key}: {value}")
        else:
            logger.error("‚ùå scores_radar est√° vazio ou ausente!")
        
        empresa = dados_completos.get('empresa', {})
        logger.info(f"  üè¢ Empresa: {empresa}")
        
        oportunidades = dados_completos.get('relatorio_oportunidades', [])
        logger.info(f"  üí° Oportunidades: {len(oportunidades)} encontradas")
        
        # Renderiza o template com os dados
        logger.info("üîÑ Renderizando template...")
        html_content = template.render(dados_completos)
        
        logger.info(f"‚úÖ Template renderizado com sucesso! Tamanho: {len(html_content)} caracteres")
        
        # Verificar se os scores aparecem no HTML gerado
        if f"score_final" in html_content:
            logger.info("‚úÖ score_final encontrado no HTML gerado")
        else:
            logger.warning("‚ö†Ô∏è score_final N√ÉO encontrado no HTML gerado")
            
        if "scores_radar.poder_de_decisao" in html_content:
            logger.info("‚úÖ scores_radar encontrado no HTML gerado")
        else:
            logger.warning("‚ö†Ô∏è scores_radar N√ÉO encontrado no HTML gerado")
        
        return html_content
        
    except jinja2.TemplateNotFound as e:
        logger.error(f"‚ùå Template n√£o encontrado: {e}")
        raise
    except jinja2.TemplateSyntaxError as e:
        logger.error(f"‚ùå Erro de sintaxe no template: {e}")
        logger.error(f"   Linha {e.lineno}: {e.message}")
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao renderizar relat√≥rio: {str(e)}")
        logger.error(f"   Tipo do erro: {type(e).__name__}")
        import traceback
        logger.error(f"   Traceback: {traceback.format_exc()}")
        raise

if __name__ == "__main__":
    # Dados Mock para teste do relat√≥rio
    # Simula o output que viria do diagn√≥stico
    mock_data = {
        "empresa": {
            "nome": "Nexus Corp",
            "setor": "Tecnologia",
            "tamanho": "50-200 funcion√°rios"
        },
        "scores_radar": {
            "poder_de_decisao": 8.8,
            "cultura_e_talentos": 6.5,
            "processos_e_automacao": 9.2,
            "inovacao_de_produtos": 7.1,
            "inteligencia_de_mercado": 5.5
        },
        "score_final": 7.4, # Altere este valor para testar os diferentes CTAs
        "introduction": "Esta √© uma introdu√ß√£o de teste para o setor de tecnologia. A implementa√ß√£o de IA neste setor oferece oportunidades significativas para empresas que buscam inova√ß√£o e efici√™ncia operacional.",
        "relatorio_oportunidades": [
            {
                "titulo": "Intelig√™ncia de Mercado Preditiva",
                "description": "Implementar um sistema de IA para an√°lise preditiva de tend√™ncias pode antecipar movimentos de concorrentes e identificar novas oportunidades de receita antes que se tornem √≥bvias.",
                "roi": "Potencial de +15% de market share em 2 anos.",
                "priority": "alta",
                "case": "A Empresa 'AlfaTech' usou uma abordagem similar e conseguiu prever uma mudan√ßa de mercado, capturando 50.000 novos clientes antes dos concorrentes."
            },
            {
                "titulo": "Capacita√ß√£o Cont√≠nua em IA para Equipes",
                "description": "Para elevar o score de Cultura e Talentos, invista em programas de forma√ß√£o cont√≠nua. Workshops pr√°ticos sobre ferramentas de IA generativa podem aumentar a efici√™ncia e a inova√ß√£o em todos os departamentos.",
                "roi": "Aumento de 25% na produtividade interna.",
                "priority": "media",
                "case": "A 'InovaCorp' implementou workshops de IA e viu uma redu√ß√£o de 40% no tempo de execu√ß√£o de tarefas administrativas, al√©m de um aumento no engajamento dos funcion√°rios."
            },
            {
                "titulo": "Otimiza√ß√£o da Experi√™ncia do Cliente com Chatbots",
                "description": "Aproveite seu alto score em Processos para implementar um chatbot avan√ßado no atendimento ao cliente. Isso pode reduzir o tempo de resposta e aumentar a satisfa√ß√£o.",
                "roi": "Redu√ß√£o de 30% nos custos de suporte ao cliente.",
                "priority": "baixa",
                "case": "A 'Solu√ß√µes R√°pidas Ltda' integrou um chatbot inteligente e conseguiu resolver 70% das solicita√ß√µes de clientes sem interven√ß√£o humana, melhorando o NPS em 10 pontos."
            }
        ],
        "relatorio_riscos": [
            {
                "titulo": "Depend√™ncia de Processos Manuais em An√°lise de Dados",
                "descricao": "A falta de automa√ß√£o na coleta e an√°lise de dados de mercado pode levar a decis√µes baseadas em informa√ß√µes desatualizadas, colocando a empresa em desvantagem competitiva."
            },
            {
                "titulo": "Risco de Obsolesc√™ncia Tecnol√≥gica",
                "descricao": "O ritmo acelerado da IA significa que as ferramentas e t√©cnicas de hoje podem estar desatualizadas amanh√£. √â crucial criar um processo para avaliar e adotar novas tecnologias de forma √°gil."
            }
        ]
    }

    # Testando diferentes cen√°rios de score_final
    # Descomente uma das linhas abaixo para gerar um relat√≥rio com um CTA diferente
    # mock_data['score_final'] = 9.0  # Mentor[IA]
    # mock_data['score_final'] = 8.0  # Founders Lend√°rios
    mock_data['score_final'] = 6.8  # Forma√ß√£o Lend√°ria
    # mock_data['score_final'] = 4.5  # Agentes Lend√°rios
    # mock_data['score_final'] = 1.5  # Ebook Melhores Prompts

    print("üß™ TESTANDO RENDERIZA√á√ÉO COM DADOS MOCK")
    print("=" * 50)
    
    # Renderiza o relat√≥rio com os dados mock
    try:
        html_output = renderizar_relatorio(mock_data)

        # Salva o resultado no mesmo diret√≥rio do script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_filename = os.path.join(script_dir, 'relatorio_final.html')
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write(html_output)

        print(f"‚úÖ Relat√≥rio gerado com sucesso!")
        print(f"üìÑ Arquivo salvo: {output_filename}")
        print(f"üìä Tamanho: {len(html_output)} caracteres")
        print(f"üåê Abra o arquivo em seu navegador para visualizar.")
        
        # Verificar se os dados est√£o no HTML
        if str(mock_data['score_final']) in html_output:
            print("‚úÖ Score final encontrado no HTML")
        else:
            print("‚ùå Score final N√ÉO encontrado no HTML")
            
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio: {e}")
        import traceback
        traceback.print_exc()
